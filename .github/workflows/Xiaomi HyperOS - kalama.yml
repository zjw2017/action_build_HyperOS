name: Xiaomi HyperOS - kalama
on:
  workflow_dispatch:
    inputs:
      build_matrix:
        description: "构建阵列，以英文逗号分隔"
        type: string
        default: "ishtar"
        required: true
      ORIGIN_URL:
        description: "底包的下载地址"
        required: true
        type: string
      URL:
        description: "移植包的下载地址"
        required: true
        type: string
      custom_version:
        description: "自定义版本号"
        required: true
        type: string
      OneDrive:
        description: "OneDrive"
        required: true
        type: boolean
        default: true
      GithubRelease:
        description: "Github Release"
        required: true
        type: boolean
        default: false
      pack_type:
        description: "打包Payload.bin"
        required: true
        type: boolean
        default: true
jobs:
  build_matrix:
    name: 设置构建阵列
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: 设置构建阵列
        id: set-matrix
        run: |
          input_var="${{ github.event.inputs.build_matrix }}"
          if [ "$input_var" = "all" ]; then
            input_var="ishtar"
          fi
          IFS=',' read -ra devices <<< "$input_var"
          json_output="{\"list\":["
          for device in "${devices[@]}"; do
            json_output+="{\"device\":\"$device\"},"
          done
          json_output=${json_output%,}
          json_output+="]}"
          echo "matrix=$json_output" >> $GITHUB_OUTPUT
  removeRelease:
    if: github.event.inputs.GithubRelease == 'true'
    name: 删除 ${{ inputs.custom_version }} 的 Github Release
    runs-on: ubuntu-latest
    steps:
      - name: 删除 ${{ inputs.custom_version }} 的 Github Release
        uses: ncipollo/release-action@v1.16.0
        with:
          owner: Human-Machine-Matrix
          repo: action_build_kalama_system
          name: "${{ inputs.custom_version }}"
          tag: "${{ inputs.custom_version }}"
          allowUpdates: true
          removeArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
  build:
    name: 自动构建
    runs-on: ubuntu-latest
    needs: build_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build_matrix.outputs.matrix) }}
    steps:
      - name: 精简无用组件
        run: |
          docker rmi `docker images -q` || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d || true
          sudo apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo apt -y autoremove --purge || true
          sudo apt -y autoclean || true
          sudo apt clean || true
      - name: 最大化并挂载构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 1024
          swap-size-mb: 6144
          remove-dotnet: "true"
          temp-reserve-mb: 1024
          remove-android: "true"
          remove-haskell: "true"
      - name: 检出仓库文件
        uses: actions/checkout@v4.2.2
        with:
          repository: Human-Machine-Matrix/action_build_kalama_system
          ref: main
          token: ${{ secrets.GH_TOKEN }}
          submodules: recursive
      - name: 下载系统包
        run: |
          eval $(cat build_local_HyperOS.sh | grep "apt-get")
          sudo bash "$GITHUB_WORKSPACE"/tools/rclone/install_rclone.sh ${{ secrets.GH_TOKEN }}
          mkdir -p ~/.config/rclone/
          mv "$GITHUB_WORKSPACE"/tools/rclone/rclone.conf ~/.config/rclone/
          sudo rm -rf "$GITHUB_WORKSPACE"/tools/rclone
          device=$(echo "$MATRIX_CONTEXT" | jq -r '.list.device')
          echo "device=$device" >> "$GITHUB_ENV"
          model=$(echo "$custom_version" | cut -d"." -f5 | sed 's/^.\(..\).*$/\1/')
          if [[ "$device" == "ishtar" ]]; then
            date=${custom_version//${model}/MA}
          elif [[ "$device" == "nuwa" ]]; then
            date=${custom_version//${model}/MB}
          fi
          echo "date=$date" >> "$GITHUB_ENV"
          aria2c -x16 -j$(nproc) -U "Mozilla/5.0" -d "$GITHUB_WORKSPACE" "$ORIGIN_URL"
          TARGET_ZIP_NAME=$(echo "$URL" | cut -d"?" -f1 | cut -d"/" -f5)
          if [[ "$URL" == *PrePackages* ]]; then
            rclone copy -P OneDrive:/MI_Packages/RubbishBin/PrePackages/"$TARGET_ZIP_NAME" "$GITHUB_WORKSPACE"
          elif [[ "$URL" != "$ORIGIN_URL" ]]; then
            aria2c -x16 -j$(nproc) -U "Mozilla/5.0" -d "$GITHUB_WORKSPACE" "$URL"
          fi
          if [[ "$pack_type" == "true" ]]; then
            if [[ "$device" == "ishtar" ]]; then
              rclone copy -P OneDrive:/MI_Packages/RubbishBin/PreArtifacts/ishtar.txt "$GITHUB_WORKSPACE"
              dos2unix "$GITHUB_WORKSPACE"/ishtar.txt
              post_package=$(cat "$GITHUB_WORKSPACE"/ishtar.txt)
            elif [[ "$device" == "nuwa" ]]; then
              rclone copy -P OneDrive:/MI_Packages/RubbishBin/PreArtifacts/nuwa.txt "$GITHUB_WORKSPACE"
              dos2unix "$GITHUB_WORKSPACE"/nuwa.txt
              post_package=$(cat "$GITHUB_WORKSPACE"/nuwa.txt)
            fi
            echo "post_package=$post_package" >> $GITHUB_ENV
          fi
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
          custom_version: ${{ inputs.custom_version }}
          ORIGIN_URL: ${{ inputs.ORIGIN_URL }}
          URL: ${{ inputs.URL }}
          pack_type: ${{ inputs.pack_type }}
      - if: github.event.inputs.pack_type == 'true'
        name: 下载 ${{ env.post_package }} 
        run: |
          if [[ -n "$post_package" ]]; then
            rclone copy -P OneDrive:/MI_Packages/RubbishBin/PreArtifacts/"$post_package" "$GITHUB_WORKSPACE"/tools/payload_repack
          fi
      - name: 下载 TWRP
        uses: robinraju/release-downloader@v1.11
        with:
            repository: zjw2017/TWRP_Backup
            tag: "twrp"
            fileName: "*${{ env.device }}*"
            out-file-path: "${{ env.device }}_files"
            token: ${{ secrets.GH_TOKEN }}
      - name: 自动构建
        run: |
          sudo appToken="${{ secrets.appToken }}" TMPDIR="$(pwd)"/TMPDIR user=$(whoami) bash build_local_HyperOS.sh $ORIGIN_URL $URL $device $date $pack_type "$post_package"
          cat "$GITHUB_WORKSPACE"/PackageInfo.txt >> $GITHUB_ENV
        env:
          ORIGIN_URL: ${{ inputs.ORIGIN_URL }}
          URL: ${{ inputs.URL }}
          pack_type: ${{ inputs.pack_type }}
      - if: github.event.inputs.GithubRelease == 'true'
        name: 处理包
        run: |
          mkdir -p "$GITHUB_WORKSPACE"/GithubRelease
          cd "$GITHUB_WORKSPACE"/GithubRelease
          sudo split -b 1536M -d "$GITHUB_WORKSPACE"/zip/"$NEW_PACKAGE_NAME" "$NEW_PACKAGE_NAME"
          cd "$GITHUB_WORKSPACE"
          touch file.log
          echo "$NEW_PACKAGE_NAME" > file.log
      - if: github.event.inputs.GithubRelease == 'true'
        name: 上传到Github Release
        uses: ncipollo/release-action@v1.16.0
        with:
          owner: Human-Machine-Matrix
          repo: action_build_kalama_system
          artifacts: ${{ github.workspace }}/GithubRelease/*
          name: "${{ inputs.custom_version }}"
          tag: "${{ inputs.custom_version }}"
          bodyFile: "${{ github.workspace }}/file.log"
          allowUpdates: true
          artifactErrorsFailBuild: true
          removeArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
      - if: ${{ github.event.inputs.OneDrive == 'true' }}
        name: 上传到OneDrive
        run: |
          rclone mkdir OneDrive:/MI_Packages/RubbishBin/DevPackages
          for i in $(ls "$GITHUB_WORKSPACE"/zip); do
            if [[ "$i" == "$bottom_package_name" ]]; then
              rclone copy -P ./zip/$i OneDrive:/MI_Packages/RubbishBin/PreArtifacts --buffer-size=1024M
            else
              rclone copy -P ./zip/$i OneDrive:/MI_Packages/RubbishBin/DevPackages --buffer-size=1024M
            fi
          done
      - name: 发送 Onedrive 上传成功通知
        run: |
          if [[ "$device" == "ishtar" ]]; then
            curl -i -X POST -H 'Content-type':'application/json' -d '{"token":"${{ secrets.appToken }}","title":"Xiaomi 13 Ultra '"$date"'已构建完成","content":" **Xiaomi 13 Ultra '"$date"'已构建完成** \n \n **底包的 OS 版本：'"$bottom_os_date"'** \n \n **底包的 Android 安全更新版本：'"$bottom_security_patch"'** \n \n **底包的 Android 基线版本：'"$bottom_base_line"'** \n \n **移植包的 OS 版本：'"$target_os_date"'** \n \n **移植包的 Android 安全更新版本：'"$target_security_patch"'** \n \n **移植包的 Android 基线版本：'"$target_base_line"'** \n \n **包名：'"$NEW_PACKAGE_NAME"'** \n \n **MD5：'"$MD5"'** \n \n **下载地址为：[https://onedrive.zjw.js.cn/RubbishBin/DevPackages/'"$NEW_PACKAGE_NAME"'](https://onedrive.zjw.js.cn/RubbishBin/DevPackages/'"$NEW_PACKAGE_NAME"')** ","topic":"lahaina","template":"markdown"}' http://www.pushplus.plus/send || true
          elif [[ "$device" == "nuwa" ]]; then
            curl -i -X POST -H 'Content-type':'application/json' -d '{"token":"${{ secrets.appToken }}","title":"Xiaomi 13 Pro '"$date"'已构建完成","content":" **Xiaomi 13 Pro '"$date"'已构建完成** \n \n **底包的 OS 版本：'"$bottom_os_date"'** \n \n **底包的 Android 安全更新版本：'"$bottom_security_patch"'** \n \n **底包的 Android 基线版本：'"$bottom_base_line"'** \n \n **移植包的 OS 版本：'"$target_os_date"'** \n \n **移植包的 Android 安全更新版本：'"$target_security_patch"'** \n \n **移植包的 Android 基线版本：'"$target_base_line"'** \n \n **包名：'"$NEW_PACKAGE_NAME"'** \n \n **MD5：'"$MD5"'** \n \n **下载地址为：[https://onedrive.zjw.js.cn/RubbishBin/DevPackages/'"$NEW_PACKAGE_NAME"'](https://onedrive.zjw.js.cn/RubbishBin/DevPackages/'"$NEW_PACKAGE_NAME"')** ","topic":"lahaina","template":"markdown"}' http://www.pushplus.plus/send || true
          fi
